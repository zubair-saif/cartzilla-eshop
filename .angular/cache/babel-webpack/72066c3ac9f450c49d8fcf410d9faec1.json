{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\n\nclass Tooltip {\n  constructor(el, zone) {\n    this.el = el;\n    this.zone = zone;\n    this.tooltipPosition = 'right';\n    this.tooltipEvent = 'hover';\n    this.appendTo = 'body';\n    this.tooltipZIndex = 'auto';\n    this.escape = true;\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(val) {\n    this._disabled = val;\n    this.deactivate();\n  }\n\n  ngAfterViewInit() {\n    this.zone.runOutsideAngular(() => {\n      if (this.tooltipEvent === 'hover') {\n        this.mouseEnterListener = this.onMouseEnter.bind(this);\n        this.mouseLeaveListener = this.onMouseLeave.bind(this);\n        this.clickListener = this.onClick.bind(this);\n        this.el.nativeElement.addEventListener('mouseenter', this.mouseEnterListener);\n        this.el.nativeElement.addEventListener('mouseleave', this.mouseLeaveListener);\n        this.el.nativeElement.addEventListener('click', this.clickListener);\n      } else if (this.tooltipEvent === 'focus') {\n        this.focusListener = this.onFocus.bind(this);\n        this.blurListener = this.onBlur.bind(this);\n        this.el.nativeElement.addEventListener('focus', this.focusListener);\n        this.el.nativeElement.addEventListener('blur', this.blurListener);\n      }\n    });\n  }\n\n  onMouseEnter(e) {\n    if (!this.container && !this.showTimeout) {\n      this.activate();\n    }\n  }\n\n  onMouseLeave(e) {\n    this.deactivate();\n  }\n\n  onFocus(e) {\n    this.activate();\n  }\n\n  onBlur(e) {\n    this.deactivate();\n  }\n\n  onClick(e) {\n    this.deactivate();\n  }\n\n  activate() {\n    this.active = true;\n    this.clearHideTimeout();\n    if (this.showDelay) this.showTimeout = setTimeout(() => {\n      this.show();\n    }, this.showDelay);else this.show();\n\n    if (this.life) {\n      let duration = this.showDelay ? this.life + this.showDelay : this.life;\n      this.hideTimeout = setTimeout(() => {\n        this.hide();\n      }, duration);\n    }\n  }\n\n  deactivate() {\n    this.active = false;\n    this.clearShowTimeout();\n\n    if (this.hideDelay) {\n      this.clearHideTimeout(); //life timeout\n\n      this.hideTimeout = setTimeout(() => {\n        this.hide();\n      }, this.hideDelay);\n    } else {\n      this.hide();\n    }\n  }\n\n  get text() {\n    return this._text;\n  }\n\n  set text(text) {\n    this._text = text;\n\n    if (this.active) {\n      if (this._text) {\n        if (this.container && this.container.offsetParent) {\n          this.updateText();\n          this.align();\n        } else {\n          this.show();\n        }\n      } else {\n        this.hide();\n      }\n    }\n  }\n\n  create() {\n    if (this.container) {\n      this.clearHideTimeout();\n      this.remove();\n    }\n\n    this.container = document.createElement('div');\n    let tooltipArrow = document.createElement('div');\n    tooltipArrow.className = 'p-tooltip-arrow';\n    this.container.appendChild(tooltipArrow);\n    this.tooltipText = document.createElement('div');\n    this.tooltipText.className = 'p-tooltip-text';\n    this.updateText();\n\n    if (this.positionStyle) {\n      this.container.style.position = this.positionStyle;\n    }\n\n    this.container.appendChild(this.tooltipText);\n    if (this.appendTo === 'body') document.body.appendChild(this.container);else if (this.appendTo === 'target') DomHandler.appendChild(this.container, this.el.nativeElement);else DomHandler.appendChild(this.container, this.appendTo);\n    this.container.style.display = 'inline-block';\n  }\n\n  show() {\n    if (!this.text || this.disabled) {\n      return;\n    }\n\n    this.create();\n    this.align();\n    DomHandler.fadeIn(this.container, 250);\n    if (this.tooltipZIndex === 'auto') this.container.style.zIndex = ++DomHandler.zindex;else this.container.style.zIndex = this.tooltipZIndex;\n    this.bindDocumentResizeListener();\n    this.bindScrollListener();\n  }\n\n  hide() {\n    this.remove();\n  }\n\n  updateText() {\n    if (this.escape) {\n      this.tooltipText.innerHTML = '';\n      this.tooltipText.appendChild(document.createTextNode(this._text));\n    } else {\n      this.tooltipText.innerHTML = this._text;\n    }\n  }\n\n  align() {\n    let position = this.tooltipPosition;\n\n    switch (position) {\n      case 'top':\n        this.alignTop();\n\n        if (this.isOutOfBounds()) {\n          this.alignBottom();\n\n          if (this.isOutOfBounds()) {\n            this.alignRight();\n\n            if (this.isOutOfBounds()) {\n              this.alignLeft();\n            }\n          }\n        }\n\n        break;\n\n      case 'bottom':\n        this.alignBottom();\n\n        if (this.isOutOfBounds()) {\n          this.alignTop();\n\n          if (this.isOutOfBounds()) {\n            this.alignRight();\n\n            if (this.isOutOfBounds()) {\n              this.alignLeft();\n            }\n          }\n        }\n\n        break;\n\n      case 'left':\n        this.alignLeft();\n\n        if (this.isOutOfBounds()) {\n          this.alignRight();\n\n          if (this.isOutOfBounds()) {\n            this.alignTop();\n\n            if (this.isOutOfBounds()) {\n              this.alignBottom();\n            }\n          }\n        }\n\n        break;\n\n      case 'right':\n        this.alignRight();\n\n        if (this.isOutOfBounds()) {\n          this.alignLeft();\n\n          if (this.isOutOfBounds()) {\n            this.alignTop();\n\n            if (this.isOutOfBounds()) {\n              this.alignBottom();\n            }\n          }\n        }\n\n        break;\n    }\n  }\n\n  getHostOffset() {\n    if (this.appendTo === 'body' || this.appendTo === 'target') {\n      let offset = this.el.nativeElement.getBoundingClientRect();\n      let targetLeft = offset.left + DomHandler.getWindowScrollLeft();\n      let targetTop = offset.top + DomHandler.getWindowScrollTop();\n      return {\n        left: targetLeft,\n        top: targetTop\n      };\n    } else {\n      return {\n        left: 0,\n        top: 0\n      };\n    }\n  }\n\n  alignRight() {\n    this.preAlign('right');\n    let hostOffset = this.getHostOffset();\n    let left = hostOffset.left + DomHandler.getOuterWidth(this.el.nativeElement);\n    let top = hostOffset.top + (DomHandler.getOuterHeight(this.el.nativeElement) - DomHandler.getOuterHeight(this.container)) / 2;\n    this.container.style.left = left + 'px';\n    this.container.style.top = top + 'px';\n  }\n\n  alignLeft() {\n    this.preAlign('left');\n    let hostOffset = this.getHostOffset();\n    let left = hostOffset.left - DomHandler.getOuterWidth(this.container);\n    let top = hostOffset.top + (DomHandler.getOuterHeight(this.el.nativeElement) - DomHandler.getOuterHeight(this.container)) / 2;\n    this.container.style.left = left + 'px';\n    this.container.style.top = top + 'px';\n  }\n\n  alignTop() {\n    this.preAlign('top');\n    let hostOffset = this.getHostOffset();\n    let left = hostOffset.left + (DomHandler.getOuterWidth(this.el.nativeElement) - DomHandler.getOuterWidth(this.container)) / 2;\n    let top = hostOffset.top - DomHandler.getOuterHeight(this.container);\n    this.container.style.left = left + 'px';\n    this.container.style.top = top + 'px';\n  }\n\n  alignBottom() {\n    this.preAlign('bottom');\n    let hostOffset = this.getHostOffset();\n    let left = hostOffset.left + (DomHandler.getOuterWidth(this.el.nativeElement) - DomHandler.getOuterWidth(this.container)) / 2;\n    let top = hostOffset.top + DomHandler.getOuterHeight(this.el.nativeElement);\n    this.container.style.left = left + 'px';\n    this.container.style.top = top + 'px';\n  }\n\n  preAlign(position) {\n    this.container.style.left = -999 + 'px';\n    this.container.style.top = -999 + 'px';\n    let defaultClassName = 'p-tooltip p-component p-tooltip-' + position;\n    this.container.className = this.tooltipStyleClass ? defaultClassName + ' ' + this.tooltipStyleClass : defaultClassName;\n  }\n\n  isOutOfBounds() {\n    let offset = this.container.getBoundingClientRect();\n    let targetTop = offset.top;\n    let targetLeft = offset.left;\n    let width = DomHandler.getOuterWidth(this.container);\n    let height = DomHandler.getOuterHeight(this.container);\n    let viewport = DomHandler.getViewport();\n    return targetLeft + width > viewport.width || targetLeft < 0 || targetTop < 0 || targetTop + height > viewport.height;\n  }\n\n  onWindowResize(e) {\n    this.hide();\n  }\n\n  bindDocumentResizeListener() {\n    this.zone.runOutsideAngular(() => {\n      this.resizeListener = this.onWindowResize.bind(this);\n      window.addEventListener('resize', this.resizeListener);\n    });\n  }\n\n  unbindDocumentResizeListener() {\n    if (this.resizeListener) {\n      window.removeEventListener('resize', this.resizeListener);\n      this.resizeListener = null;\n    }\n  }\n\n  bindScrollListener() {\n    if (!this.scrollHandler) {\n      this.scrollHandler = new ConnectedOverlayScrollHandler(this.el.nativeElement, () => {\n        if (this.container) {\n          this.hide();\n        }\n      });\n    }\n\n    this.scrollHandler.bindScrollListener();\n  }\n\n  unbindScrollListener() {\n    if (this.scrollHandler) {\n      this.scrollHandler.unbindScrollListener();\n    }\n  }\n\n  unbindEvents() {\n    if (this.tooltipEvent === 'hover') {\n      this.el.nativeElement.removeEventListener('mouseenter', this.mouseEnterListener);\n      this.el.nativeElement.removeEventListener('mouseleave', this.mouseLeaveListener);\n      this.el.nativeElement.removeEventListener('click', this.clickListener);\n    } else if (this.tooltipEvent === 'focus') {\n      this.el.nativeElement.removeEventListener('focus', this.focusListener);\n      this.el.nativeElement.removeEventListener('blur', this.blurListener);\n    }\n\n    this.unbindDocumentResizeListener();\n  }\n\n  remove() {\n    if (this.container && this.container.parentElement) {\n      if (this.appendTo === 'body') document.body.removeChild(this.container);else if (this.appendTo === 'target') this.el.nativeElement.removeChild(this.container);else DomHandler.removeChild(this.container, this.appendTo);\n    }\n\n    this.unbindDocumentResizeListener();\n    this.unbindScrollListener();\n    this.clearTimeouts();\n    this.container = null;\n    this.scrollHandler = null;\n  }\n\n  clearShowTimeout() {\n    if (this.showTimeout) {\n      clearTimeout(this.showTimeout);\n      this.showTimeout = null;\n    }\n  }\n\n  clearHideTimeout() {\n    if (this.hideTimeout) {\n      clearTimeout(this.hideTimeout);\n      this.hideTimeout = null;\n    }\n  }\n\n  clearTimeouts() {\n    this.clearShowTimeout();\n    this.clearHideTimeout();\n  }\n\n  ngOnDestroy() {\n    this.unbindEvents();\n    this.remove();\n\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n  }\n\n}\n\nTooltip.ɵfac = function Tooltip_Factory(t) {\n  return new (t || Tooltip)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nTooltip.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: Tooltip,\n  selectors: [[\"\", \"pTooltip\", \"\"]],\n  inputs: {\n    tooltipPosition: \"tooltipPosition\",\n    tooltipEvent: \"tooltipEvent\",\n    appendTo: \"appendTo\",\n    positionStyle: \"positionStyle\",\n    tooltipStyleClass: \"tooltipStyleClass\",\n    tooltipZIndex: \"tooltipZIndex\",\n    escape: \"escape\",\n    showDelay: \"showDelay\",\n    hideDelay: \"hideDelay\",\n    life: \"life\",\n    disabled: [\"tooltipDisabled\", \"disabled\"],\n    text: [\"pTooltip\", \"text\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Tooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[pTooltip]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    tooltipPosition: [{\n      type: Input\n    }],\n    tooltipEvent: [{\n      type: Input\n    }],\n    appendTo: [{\n      type: Input\n    }],\n    positionStyle: [{\n      type: Input\n    }],\n    tooltipStyleClass: [{\n      type: Input\n    }],\n    tooltipZIndex: [{\n      type: Input\n    }],\n    escape: [{\n      type: Input\n    }],\n    showDelay: [{\n      type: Input\n    }],\n    hideDelay: [{\n      type: Input\n    }],\n    life: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input,\n      args: [\"tooltipDisabled\"]\n    }],\n    text: [{\n      type: Input,\n      args: ['pTooltip']\n    }]\n  });\n})();\n\nclass TooltipModule {}\n\nTooltipModule.ɵfac = function TooltipModule_Factory(t) {\n  return new (t || TooltipModule)();\n};\n\nTooltipModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TooltipModule\n});\nTooltipModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [Tooltip],\n      declarations: [Tooltip]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Tooltip, TooltipModule };","map":{"version":3,"sources":["D:/Angular/Cartzilla-eshop/node_modules/primeng/fesm2015/primeng-tooltip.js"],"names":["i0","Directive","Input","NgModule","CommonModule","DomHandler","ConnectedOverlayScrollHandler","Tooltip","constructor","el","zone","tooltipPosition","tooltipEvent","appendTo","tooltipZIndex","escape","disabled","_disabled","val","deactivate","ngAfterViewInit","runOutsideAngular","mouseEnterListener","onMouseEnter","bind","mouseLeaveListener","onMouseLeave","clickListener","onClick","nativeElement","addEventListener","focusListener","onFocus","blurListener","onBlur","e","container","showTimeout","activate","active","clearHideTimeout","showDelay","setTimeout","show","life","duration","hideTimeout","hide","clearShowTimeout","hideDelay","text","_text","offsetParent","updateText","align","create","remove","document","createElement","tooltipArrow","className","appendChild","tooltipText","positionStyle","style","position","body","display","fadeIn","zIndex","zindex","bindDocumentResizeListener","bindScrollListener","innerHTML","createTextNode","alignTop","isOutOfBounds","alignBottom","alignRight","alignLeft","getHostOffset","offset","getBoundingClientRect","targetLeft","left","getWindowScrollLeft","targetTop","top","getWindowScrollTop","preAlign","hostOffset","getOuterWidth","getOuterHeight","defaultClassName","tooltipStyleClass","width","height","viewport","getViewport","onWindowResize","resizeListener","window","unbindDocumentResizeListener","removeEventListener","scrollHandler","unbindScrollListener","unbindEvents","parentElement","removeChild","clearTimeouts","clearTimeout","ngOnDestroy","destroy","ɵfac","ElementRef","NgZone","ɵdir","type","args","selector","TooltipModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\n\nclass Tooltip {\n    constructor(el, zone) {\n        this.el = el;\n        this.zone = zone;\n        this.tooltipPosition = 'right';\n        this.tooltipEvent = 'hover';\n        this.appendTo = 'body';\n        this.tooltipZIndex = 'auto';\n        this.escape = true;\n    }\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(val) {\n        this._disabled = val;\n        this.deactivate();\n    }\n    ngAfterViewInit() {\n        this.zone.runOutsideAngular(() => {\n            if (this.tooltipEvent === 'hover') {\n                this.mouseEnterListener = this.onMouseEnter.bind(this);\n                this.mouseLeaveListener = this.onMouseLeave.bind(this);\n                this.clickListener = this.onClick.bind(this);\n                this.el.nativeElement.addEventListener('mouseenter', this.mouseEnterListener);\n                this.el.nativeElement.addEventListener('mouseleave', this.mouseLeaveListener);\n                this.el.nativeElement.addEventListener('click', this.clickListener);\n            }\n            else if (this.tooltipEvent === 'focus') {\n                this.focusListener = this.onFocus.bind(this);\n                this.blurListener = this.onBlur.bind(this);\n                this.el.nativeElement.addEventListener('focus', this.focusListener);\n                this.el.nativeElement.addEventListener('blur', this.blurListener);\n            }\n        });\n    }\n    onMouseEnter(e) {\n        if (!this.container && !this.showTimeout) {\n            this.activate();\n        }\n    }\n    onMouseLeave(e) {\n        this.deactivate();\n    }\n    onFocus(e) {\n        this.activate();\n    }\n    onBlur(e) {\n        this.deactivate();\n    }\n    onClick(e) {\n        this.deactivate();\n    }\n    activate() {\n        this.active = true;\n        this.clearHideTimeout();\n        if (this.showDelay)\n            this.showTimeout = setTimeout(() => { this.show(); }, this.showDelay);\n        else\n            this.show();\n        if (this.life) {\n            let duration = this.showDelay ? this.life + this.showDelay : this.life;\n            this.hideTimeout = setTimeout(() => { this.hide(); }, duration);\n        }\n    }\n    deactivate() {\n        this.active = false;\n        this.clearShowTimeout();\n        if (this.hideDelay) {\n            this.clearHideTimeout(); //life timeout\n            this.hideTimeout = setTimeout(() => { this.hide(); }, this.hideDelay);\n        }\n        else {\n            this.hide();\n        }\n    }\n    get text() {\n        return this._text;\n    }\n    set text(text) {\n        this._text = text;\n        if (this.active) {\n            if (this._text) {\n                if (this.container && this.container.offsetParent) {\n                    this.updateText();\n                    this.align();\n                }\n                else {\n                    this.show();\n                }\n            }\n            else {\n                this.hide();\n            }\n        }\n    }\n    create() {\n        if (this.container) {\n            this.clearHideTimeout();\n            this.remove();\n        }\n        this.container = document.createElement('div');\n        let tooltipArrow = document.createElement('div');\n        tooltipArrow.className = 'p-tooltip-arrow';\n        this.container.appendChild(tooltipArrow);\n        this.tooltipText = document.createElement('div');\n        this.tooltipText.className = 'p-tooltip-text';\n        this.updateText();\n        if (this.positionStyle) {\n            this.container.style.position = this.positionStyle;\n        }\n        this.container.appendChild(this.tooltipText);\n        if (this.appendTo === 'body')\n            document.body.appendChild(this.container);\n        else if (this.appendTo === 'target')\n            DomHandler.appendChild(this.container, this.el.nativeElement);\n        else\n            DomHandler.appendChild(this.container, this.appendTo);\n        this.container.style.display = 'inline-block';\n    }\n    show() {\n        if (!this.text || this.disabled) {\n            return;\n        }\n        this.create();\n        this.align();\n        DomHandler.fadeIn(this.container, 250);\n        if (this.tooltipZIndex === 'auto')\n            this.container.style.zIndex = ++DomHandler.zindex;\n        else\n            this.container.style.zIndex = this.tooltipZIndex;\n        this.bindDocumentResizeListener();\n        this.bindScrollListener();\n    }\n    hide() {\n        this.remove();\n    }\n    updateText() {\n        if (this.escape) {\n            this.tooltipText.innerHTML = '';\n            this.tooltipText.appendChild(document.createTextNode(this._text));\n        }\n        else {\n            this.tooltipText.innerHTML = this._text;\n        }\n    }\n    align() {\n        let position = this.tooltipPosition;\n        switch (position) {\n            case 'top':\n                this.alignTop();\n                if (this.isOutOfBounds()) {\n                    this.alignBottom();\n                    if (this.isOutOfBounds()) {\n                        this.alignRight();\n                        if (this.isOutOfBounds()) {\n                            this.alignLeft();\n                        }\n                    }\n                }\n                break;\n            case 'bottom':\n                this.alignBottom();\n                if (this.isOutOfBounds()) {\n                    this.alignTop();\n                    if (this.isOutOfBounds()) {\n                        this.alignRight();\n                        if (this.isOutOfBounds()) {\n                            this.alignLeft();\n                        }\n                    }\n                }\n                break;\n            case 'left':\n                this.alignLeft();\n                if (this.isOutOfBounds()) {\n                    this.alignRight();\n                    if (this.isOutOfBounds()) {\n                        this.alignTop();\n                        if (this.isOutOfBounds()) {\n                            this.alignBottom();\n                        }\n                    }\n                }\n                break;\n            case 'right':\n                this.alignRight();\n                if (this.isOutOfBounds()) {\n                    this.alignLeft();\n                    if (this.isOutOfBounds()) {\n                        this.alignTop();\n                        if (this.isOutOfBounds()) {\n                            this.alignBottom();\n                        }\n                    }\n                }\n                break;\n        }\n    }\n    getHostOffset() {\n        if (this.appendTo === 'body' || this.appendTo === 'target') {\n            let offset = this.el.nativeElement.getBoundingClientRect();\n            let targetLeft = offset.left + DomHandler.getWindowScrollLeft();\n            let targetTop = offset.top + DomHandler.getWindowScrollTop();\n            return { left: targetLeft, top: targetTop };\n        }\n        else {\n            return { left: 0, top: 0 };\n        }\n    }\n    alignRight() {\n        this.preAlign('right');\n        let hostOffset = this.getHostOffset();\n        let left = hostOffset.left + DomHandler.getOuterWidth(this.el.nativeElement);\n        let top = hostOffset.top + (DomHandler.getOuterHeight(this.el.nativeElement) - DomHandler.getOuterHeight(this.container)) / 2;\n        this.container.style.left = left + 'px';\n        this.container.style.top = top + 'px';\n    }\n    alignLeft() {\n        this.preAlign('left');\n        let hostOffset = this.getHostOffset();\n        let left = hostOffset.left - DomHandler.getOuterWidth(this.container);\n        let top = hostOffset.top + (DomHandler.getOuterHeight(this.el.nativeElement) - DomHandler.getOuterHeight(this.container)) / 2;\n        this.container.style.left = left + 'px';\n        this.container.style.top = top + 'px';\n    }\n    alignTop() {\n        this.preAlign('top');\n        let hostOffset = this.getHostOffset();\n        let left = hostOffset.left + (DomHandler.getOuterWidth(this.el.nativeElement) - DomHandler.getOuterWidth(this.container)) / 2;\n        let top = hostOffset.top - DomHandler.getOuterHeight(this.container);\n        this.container.style.left = left + 'px';\n        this.container.style.top = top + 'px';\n    }\n    alignBottom() {\n        this.preAlign('bottom');\n        let hostOffset = this.getHostOffset();\n        let left = hostOffset.left + (DomHandler.getOuterWidth(this.el.nativeElement) - DomHandler.getOuterWidth(this.container)) / 2;\n        let top = hostOffset.top + DomHandler.getOuterHeight(this.el.nativeElement);\n        this.container.style.left = left + 'px';\n        this.container.style.top = top + 'px';\n    }\n    preAlign(position) {\n        this.container.style.left = -999 + 'px';\n        this.container.style.top = -999 + 'px';\n        let defaultClassName = 'p-tooltip p-component p-tooltip-' + position;\n        this.container.className = this.tooltipStyleClass ? defaultClassName + ' ' + this.tooltipStyleClass : defaultClassName;\n    }\n    isOutOfBounds() {\n        let offset = this.container.getBoundingClientRect();\n        let targetTop = offset.top;\n        let targetLeft = offset.left;\n        let width = DomHandler.getOuterWidth(this.container);\n        let height = DomHandler.getOuterHeight(this.container);\n        let viewport = DomHandler.getViewport();\n        return (targetLeft + width > viewport.width) || (targetLeft < 0) || (targetTop < 0) || (targetTop + height > viewport.height);\n    }\n    onWindowResize(e) {\n        this.hide();\n    }\n    bindDocumentResizeListener() {\n        this.zone.runOutsideAngular(() => {\n            this.resizeListener = this.onWindowResize.bind(this);\n            window.addEventListener('resize', this.resizeListener);\n        });\n    }\n    unbindDocumentResizeListener() {\n        if (this.resizeListener) {\n            window.removeEventListener('resize', this.resizeListener);\n            this.resizeListener = null;\n        }\n    }\n    bindScrollListener() {\n        if (!this.scrollHandler) {\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.el.nativeElement, () => {\n                if (this.container) {\n                    this.hide();\n                }\n            });\n        }\n        this.scrollHandler.bindScrollListener();\n    }\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n    unbindEvents() {\n        if (this.tooltipEvent === 'hover') {\n            this.el.nativeElement.removeEventListener('mouseenter', this.mouseEnterListener);\n            this.el.nativeElement.removeEventListener('mouseleave', this.mouseLeaveListener);\n            this.el.nativeElement.removeEventListener('click', this.clickListener);\n        }\n        else if (this.tooltipEvent === 'focus') {\n            this.el.nativeElement.removeEventListener('focus', this.focusListener);\n            this.el.nativeElement.removeEventListener('blur', this.blurListener);\n        }\n        this.unbindDocumentResizeListener();\n    }\n    remove() {\n        if (this.container && this.container.parentElement) {\n            if (this.appendTo === 'body')\n                document.body.removeChild(this.container);\n            else if (this.appendTo === 'target')\n                this.el.nativeElement.removeChild(this.container);\n            else\n                DomHandler.removeChild(this.container, this.appendTo);\n        }\n        this.unbindDocumentResizeListener();\n        this.unbindScrollListener();\n        this.clearTimeouts();\n        this.container = null;\n        this.scrollHandler = null;\n    }\n    clearShowTimeout() {\n        if (this.showTimeout) {\n            clearTimeout(this.showTimeout);\n            this.showTimeout = null;\n        }\n    }\n    clearHideTimeout() {\n        if (this.hideTimeout) {\n            clearTimeout(this.hideTimeout);\n            this.hideTimeout = null;\n        }\n    }\n    clearTimeouts() {\n        this.clearShowTimeout();\n        this.clearHideTimeout();\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        this.remove();\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n    }\n}\nTooltip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: Tooltip, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTooltip.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.5\", type: Tooltip, selector: \"[pTooltip]\", inputs: { tooltipPosition: \"tooltipPosition\", tooltipEvent: \"tooltipEvent\", appendTo: \"appendTo\", positionStyle: \"positionStyle\", tooltipStyleClass: \"tooltipStyleClass\", tooltipZIndex: \"tooltipZIndex\", escape: \"escape\", showDelay: \"showDelay\", hideDelay: \"hideDelay\", life: \"life\", disabled: [\"tooltipDisabled\", \"disabled\"], text: [\"pTooltip\", \"text\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: Tooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[pTooltip]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { tooltipPosition: [{\n                type: Input\n            }], tooltipEvent: [{\n                type: Input\n            }], appendTo: [{\n                type: Input\n            }], positionStyle: [{\n                type: Input\n            }], tooltipStyleClass: [{\n                type: Input\n            }], tooltipZIndex: [{\n                type: Input\n            }], escape: [{\n                type: Input\n            }], showDelay: [{\n                type: Input\n            }], hideDelay: [{\n                type: Input\n            }], life: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [\"tooltipDisabled\"]\n            }], text: [{\n                type: Input,\n                args: ['pTooltip']\n            }] } });\nclass TooltipModule {\n}\nTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TooltipModule, declarations: [Tooltip], imports: [CommonModule], exports: [Tooltip] });\nTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TooltipModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    exports: [Tooltip],\n                    declarations: [Tooltip]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Tooltip, TooltipModule };\n"]},"metadata":{},"sourceType":"module"}